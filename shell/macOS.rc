# shellcheck shell=bash

#=======================================================================#
# homebrew                                                              #
#=======================================================================#

HOMEBREW_PREFIX=$(brew --prefix)
export HOMEBREW_PREFIX
export HOMEBREW_CASK_OPTS="--no-quarantine"
export HOMEBREW_NO_AUTO_UPDATE=true

#=======================================================================#
# z                                                                     #
#=======================================================================#

# shellcheck disable=SC1091
source "$HOMEBREW_PREFIX/etc/profile.d/z.sh"

#=======================================================================#
# iterm2                                                                #
#=======================================================================#

if [ -f "$HOME/.iterm2_shell_integration.${SHELL##*/}" ]; then
  # shellcheck disable=SC1090
  source "$HOME/.iterm2_shell_integration.${SHELL##*/}"
  alias imgcat="~/.iterm2/imgcat"
  alias imgls="~/.iterm2/imgls"
  alias it2attention="~/.iterm2/it2attention"
  alias it2check="~/.iterm2/it2check"
  alias it2copy="~/.iterm2/it2copy"
  alias it2dl="~/.iterm2/it2dl"
  alias it2getvar="~/.iterm2/it2getvar"
  alias it2git="~/.iterm2/it2git"
  alias it2setcolor="~/.iterm2/it2setcolor"
  alias it2setkeylabel="~/.iterm2/it2setkeylabel"
  alias it2ul="~/.iterm2/it2ul"
  alias it2universion="~/.iterm2/it2universion"
  export ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX=1
fi

#=======================================================================#
# go                                                                    #
#=======================================================================#

export GOPROXY=https://goproxy.io,direct
# goenv
export GOENV_GOPATH_PREFIX="$HOME/.go"
eval "$(goenv init -)"

#=======================================================================#
# rust                                                                  #
#=======================================================================#

export PATHS=(
  "$HOME/.cargo/bin"
  "${PATHS[@]}"
)

#=======================================================================#
# php                                                                   #
#=======================================================================#

export PATHS=(
  "$HOME/.composer/vendor/bin"
  "${PATHS[@]}"
)

#=======================================================================#
# node                                                                  #
#=======================================================================#

export DEFAULT_NODE_VERSION="lts/*"

# nodenv
eval "$(nodenv init -)"
export PATHS=(
  "$HOME/.nodenv/shims"
  "${PATHS[@]}"
)

#=======================================================================#
# python                                                                #
#=======================================================================#

# pyenv
# https://github.com/pyenv/pyenv/issues/1649
eval "$(pyenv init -)"
export PATHS=(
  "$HOME/.pyenv/shims"
  "${PATHS[@]}"
)

#=======================================================================#
# ruby                                                                  #
#=======================================================================#

# rbenv
eval "$(rbenv init -)"
export PATHS=(
  "$HOME/.rbenv/shims"
  "${PATHS[@]}"
)

#=======================================================================#
# java                                                                  #
#=======================================================================#

# jenv
eval "$(jenv init -)"
export PATHS=(
  "$HOME/.jenv/shims"
  "${PATHS[@]}"
)

#=======================================================================#
# flutter                                                               #
#=======================================================================#

export PUB_HOSTED_URL="https://pub.flutter-io.cn"
export FLUTTER_STORAGE_BASE_URL="https://storage.flutter-io.cn"

#=======================================================================#
# android studio                                                        #
#=======================================================================#

export ANDROID_HOME="$HOME/Library/Android/sdk"
PATHS+=(
  "$ANDROID_HOME/emulator"
  "$ANDROID_HOME/tools"
  "$ANDROID_HOME/tools/bin"
  "$ANDROID_HOME/platform-tools"
)

#=======================================================================#
# vagrant                                                               #
#=======================================================================#

export VAGRANT_DEFAULT_BOX="fedora/35-cloud-base"

#=======================================================================#
# podman                                                                #
#=======================================================================#

export CONTAINER_HOST="ssh://vagrant@127.0.0.1:2222/run/podman/podman.sock"
export CONTAINER_SSHKEY="$HOME/.vagrant/machines/podman/virtualbox/private_key"

#=======================================================================#
# asdf                                                                  #
#=======================================================================#

# shellcheck disable=SC1091
source "$HOMEBREW_PREFIX/opt/asdf/asdf.sh"

#=======================================================================#
# functions                                                             #
#=======================================================================#

install-command-line-tools() {
  "$DOTFILES_HOME/install" macos_install_command_line_tools
}

reset-launch-pad() {
  defaults write com.apple.dock ResetLaunchPad -bool true
  killall Dock
}

build-install-image() {
  if [ -z "$1" ]; then
    hdiutil create -o /tmp/macOS -size 20000m -volname macOS -layout SPUD -fs HFS+J
    hdiutil attach /tmp/macOS.dmg -noverify -mountpoint /Volumes/macOS
  fi

  local OS_VERSION_NAME
  OS_VERSION_NAME=$("$DOTFILES_HOME/install" get_os_version_name)

  if [ ! -f "/Applications/Install macOS $OS_VERSION_NAME.app/Contents/Resources/createinstallmedia" ]; then
    rm -rf "/Applications/Install macOS $OS_VERSION_NAME.app"
    softwareupdate --fetch-full-installer
  fi

  sudo "/Applications/Install macOS $OS_VERSION_NAME.app/Contents/Resources/createinstallmedia" --volume "/Volumes/${1:-macOS}" --nointeraction

  if [ -z "$1" ]; then
    hdiutil detach "/Volumes/Install macOS $OS_VERSION_NAME"
    hdiutil convert /tmp/macOS.dmg -format UDTO -o /tmp/macOS.cdr

    mv /tmp/macOS.cdr "$HOME/Downloads/macOS.iso"
    rm -rf /tmp/macOS.dmg
  fi
}

# https://stackoverflow.com/questions/750172/how-to-change-the-author-and-committer-name-and-e-mail-of-multiple-commits-in-gi
change-git-user() {
  local CALLBACK
  read -r -d '' CALLBACK <<EOF || true
old_email = b"$1"
new_name = b"$2"
new_email = b"$3"

if commit.committer_email == old_email:
  commit.committer_name = new_name
  commit.committer_email = new_email

if commit.author_email == old_email:
  commit.author_name = new_name
  commit.author_email = new_email
EOF
  git filter-repo --commit-callback "$CALLBACK"
}

standard-version() {
  local VERSION_TAG_PREFIX
  VERSION_TAG_PREFIX=$(git config --get --system gitflow.prefix.versionTag || git config --get --global gitflow.prefix.versionTag || echo "v")

  "${NODENV_ROOT:-$HOME/.nodenv}/shims/standard-version" -t "$VERSION_TAG_PREFIX" "$@"
}

podman() {
  if ! vagrant status --machine-readable | grep "podman,state,running" 1>/dev/null 2>&1; then
    vagrant up podman
  fi

  "$HOMEBREW_PREFIX/bin/podman" "$@"
}

docker() {
  if ! "$HOMEBREW_PREFIX/bin/docker" info 1>/dev/null 2>&1; then
    open -g -a "/Applications/Docker.app"

    while ! "$HOMEBREW_PREFIX/bin/docker" info 1>/dev/null 2>&1; do
      sleep 5
    done
  fi

  "$HOMEBREW_PREFIX/bin/docker" "$@"
}

npmg() {
  nodenv shell system
  npm -g "$@"
}

pipg() {
  pyenv shell system
  pip "$@"
}

gitclone() {
  setopt local_options BASH_REMATCH

  # https://stackoverflow.com/questions/6174220/parse-url-in-shell-script
  local URI_REGEX="^(([^:/?#]+):)?(//((([^:/?#]+)@)?([^:/?#]+)(:([0-9]+))?))?(/([^?#]*))(\?([^#]*))?(#(.*))?"

  if [[ "$1" =~ $URI_REGEX ]]; then
    local DOMAIN="${BASH_REMATCH[8]:l}"
    local PATHNAME="${BASH_REMATCH[11]}"
    local OWNER REPO
    OWNER="${PATHNAME:h:t}"
    REPO="${PATHNAME%.git}"
    REPO="${REPO:t}"

    if [ -n "$DOMAIN" ] && [ -n "$OWNER" ] && [ -n "$REPO" ]; then
      local DIR="$HOME/Repositories/$DOMAIN/$OWNER/$REPO"

      git clone "$1" "$DIR"

      cd "$DIR" || exit 1

      local GIT_HOSTS_USERS U

      read -r -A GIT_HOSTS_USERS <<< "$GIT_HOSTS_USERS_STRING"

      for U in "${GIT_HOSTS_USERS[@]}"; do
        if echo "$U" | grep -E "^$DOMAIN," 1>/dev/null 2>&1; then
          local SEGMENTS
          IFS="," read -r -A SEGMENTS <<< "$U"

          if [ -n "${SEGMENTS[2]}" ]; then
            echo "Set Git User Email: ${SEGMENTS[2]}"
            git config --local user.email "${SEGMENTS[2]}"
          fi

          if [ -n "${SEGMENTS[3]}" ]; then
            echo "Set Git User Name: ${SEGMENTS[3]}"
            git config --local user.name "${SEGMENTS[3]}"
          fi
        fi
      done
    fi
  fi
}
